--- opencv_contrib-3.2.0\modules\structured_light\src\sinusoidalpattern.cpp
+++ opencv_contrib-3.2.0\modules\structured_light\src\sinusoidalpattern.cpp
@@ -200,12 +200,12 @@ bool SinusoidalPatternProfilometry_Impl::generate( OutputArrayOfArrays pattern )
     if( params.horizontal )
     {
         period = params.height / params.nbrOfPeriods;
-        nbrOfMarkersOnOneRow = (int)floor((params.width - firstMarkerOffset) / m);
+        nbrOfMarkersOnOneRow = (int)floor((float)(params.width - firstMarkerOffset) / m);
     }
     else
     {
         period = params.width / params.nbrOfPeriods;
-        nbrOfMarkersOnOneRow = (int)floor((params.height - firstMarkerOffset) / m);
+        nbrOfMarkersOnOneRow = (int)floor((float)(params.height - firstMarkerOffset) / m);
     }
     frequency = (float) 1 / period;
 
@@ -821,7 +821,7 @@ void SinusoidalPatternProfilometry_Impl::computeDataModulationTerm( InputArrayOf
                     i2 = patternImages_[1].at<uchar>(i, j);
                     i3 = patternImages_[2].at<uchar>(i, j);
 
-                    num = sqrt(3 * ( i1 - i3 ) * ( i1 - i3 ) + ( 2 * i2 - i1 - i3 ) * ( 2 * i2 - i1 - i3 ));
+                    num = sqrt(3. * ( i1 - i3 ) * ( i1 - i3 ) + ( 2. * i2 - i1 - i3 ) * ( 2. * i2 - i1 - i3 ));
                     den = i1 + i2 + i3;
                     dmt.at<float>(i, j) = 1 - num / den;
                 }
@@ -916,4 +916,4 @@ Ptr<SinusoidalPattern> SinusoidalPattern::create( const SinusoidalPattern::Param
     return makePtr<SinusoidalPatternProfilometry_Impl>(params);
 }
 }
-}
\ No newline at end of file
+}
